;;; Automatically generated on Fri Jun 18 20:09:34 2010
;;; Invoked by m4nic@Idefix-Ubuntu using 23.0.91.1
(setq-default kill-ring '("" #("ruby" 0 4 (anything-realvalue "inf-ruby")) #("
" 0 1 (fontified t)) #("  
" 0 1 (fontified t) 1 2 (syntax-table nil fontified t) 2 3 (fontified t)) #("  " 0 1 (fontified t) 1 2 (fontified t)) #("
 begin_rules" 0 12 (fontified t) 12 13 (syntax-table nil fontified t)) #("symbol " 0 6 (face font-lock-builtin-face fontified t) 6 7 (fontified t)) #("name " 0 4 (face font-lock-builtin-face fontified t) 4 5 (fontified t)) #("if-not (is-logged-in?)
               " 0 2 (face font-lock-keyword-face fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 14 (fontified t) 14 21 (fontified t action nil candidate-face ac-dabbrev-menu-face selection-face ac-dabbrev-selection-face) 21 22 (fontified t) 22 38 (fontified t)) #("block help []
                    " 0 5 (fontified t) 5 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 34 (fontified t)) #("{}" 0 1 (fontified t) 1 2 (fontified t))))
(setq-default session-file-alist '(("~/Lab/ruby/drp/test1.rb" 163 265 1 nil nil 265 (overwrite-mode)) ("~/Projects/emacs-config/elpa/ruby-mode-1.1/ruby-mode-autoloads.el" 982 1 1 nil nil 982 (overwrite-mode)) ("~/Projects/emacs-config/elpa/inf-ruby-2.1/inf-ruby-autoloads.el" 1246 1 1 nil nil 1246 (overwrite-mode)) ("~/Projects/emacs-config/elpa/rspec-mode-0.2/rspec-mode-autoloads.el" 1240 1 1 nil nil 1240 (overwrite-mode)) ("~/Projects/emacs-config/elpa/ruby-compilation-0.7/ruby-compilation-autoloads.el" 1221 1 1 nil nil 1221 (overwrite-mode)) ("~/Projects/emacs-config/elpa/ruby-electric-1.1/ruby-electric-autoloads.el" 930 1 1 nil nil 930 (overwrite-mode)) ("~/Projects/emacs-config/elpa/clojure-mode-1.7.1/clojure-test-mode.el" 12248 8482 1 nil nil 12174 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/md5.clj" 11 1 1 nil nil 12 (overwrite-mode)) ("~/Lab/clojure/clocks/test/clocks/core_test.clj" 239 1117 1 nil nil 1112 (overwrite-mode)) ("~/Sites/slutmachines.com/src/pmatrix/utils.clj" 95 1209 1 nil nil 26 (overwrite-mode)) ("~/Sites/slutmachines.com/src/pmatrix/core.clj" 5909 141 1 nil nil 5910 (overwrite-mode)) ("~/Sites/slutmachines.com/src/games/crisscross.clj" 1 9335 1 nil nil 105 (overwrite-mode)) ("~/Lab/clojure/clocks/project.clj" 23 574 1 nil nil 24 (overwrite-mode)) ("~/Sites/slutmachines.com/project.clj" 578 560 1 nil nil 579 (overwrite-mode)) ("~/Lab/clojure/clocks/README.markdown" 312 3337 1 nil nil 722 (overwrite-mode)) ("~/Sites/boymaas.nl/posts/2010-06-15-clocks-portmortem.markdown" 5071 4727 1 nil nil 5072 (overwrite-mode)) ("~/Sites/slutmachines.com/public/style.css" 1944 70 1 nil nil 1925 (overwrite-mode)) ("~/Lab/clojure/clocks/_ref/swank-clojure/src/swank/clj_contrib/pprint.clj" 443 1 1 nil nil 253 (overwrite-mode)) ("~/Sites/slutmachines.com/src/server.clj" 2722 235 1 nil nil 235 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/defjs.clj" 1815 1541 1 nil nil 68 (overwrite-mode)) ("~/Sites/slutmachines.com/src/casino/model/tables.clj" 3756 2344 1 nil nil 2343 (overwrite-mode)) ("~/Sites/slutmachines.com/src/casino/model/player.clj" 790 1 1 nil nil 791 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/data.clj" 1691 1694 1 nil nil 1692 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/jquery.clj" 1031 894 1 nil nil 1022 (overwrite-mode)) ("~/Sites/slutmachines.com/src/pages.clj" 4190 6005 1 nil nil 5913 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/core.clj" 4911 4226 1 nil nil 4961 (overwrite-mode)) ("~/Projects/emacs-config/init-clojure.el" 705 55 1 nil nil 190 (overwrite-mode)) ("~/Lab/clojure/clocks/src/examples/login.clj" 3671 3671 1 nil nil 3671 (overwrite-mode)) ("~/.clojure/user.clj" 35 1 1 nil nil 35 (overwrite-mode)) ("~/Projects/emacs-config/elpa/clojure-mode-1.7.1/clojure-mode-autoloads.el" 1040 1 1 nil nil 1040 (overwrite-mode)) ("~/Projects/emacs-config/.viper" 825 1 1 nil nil 826 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/core.clj.bk" 4320 6897 1 nil nil 6898 (overwrite-mode)) ("~/Personal/Planning/innovita.otl" 730 269 1 nil nil 526 (overwrite-mode)) ("~/Lab/clojure/clocks/.gitignore" 72 1 1 nil nil 72 (overwrite-mode)) ("~/Projects/emacs-config/init.el" 11647 10683 1 nil nil 11646 (overwrite-mode)) ("~/Lab/clojure/clocks/src/clocks/core.txt" 2065 2412 1 nil nil 2412 (overwrite-mode)) ("~/Sites/slutmachines.com/_ref/sandbar/examples/src/example/auth_demo.clj" 1187 2163 1 nil nil 1455 (overwrite-mode)) ("~/Sites/slutmachines.com/.gitignore" 154 1 1 nil nil 153 (overwrite-mode)) ("~/Projects/emacs-config/init-lisp.el" 1 1 1 nil nil 1 (overwrite-mode)) ("~/Lab/clojure/jfastcgi/fastcgi/src/fastcgi/core.clj" 64 1 1 nil nil 65 (overwrite-mode)) ("~/Projects/emacs-config/elpa/slime-20100404/slime.el" 12807 1 1 nil nil 12807 (overwrite-mode)) ("~/Lab/clojure/Gajure/src/gajure/core.clj" 4045 4098 1 nil nil 1056 (overwrite-mode)) ("~/Projects/emacs-config/elpa/slime-20100404/slime-autoloads.el" 2563 nil 1 nil nil 2563 (overwrite-mode)) ("~/Projects/emacs-config/elpa/slime-repl-20100404/slime-repl-autoloads.el" 424 nil 1 nil nil 424 (overwrite-mode)) ("~/Projects/emacs-config/elpa/swank-clojure-1.1.0/swank-clojure-autoloads.el" 1078 nil 1 nil nil 1078 (overwrite-mode)) ("~/Lab/clojure/Gajure/src/Example/example.clj" 778 47 1 nil nil 779 (overwrite-mode)) ("~/.gitignore" 493 771 1 nil nil 644 (overwrite-mode)) ("~/Planning/innovita/casino.gtd" 30148 29399 1 nil nil nil (overwrite-mode)) ("~/Planning/concepts/ocasso.gtd" 2599 448 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita/het-schouwtje.gtd" 405 302 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/maybe.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita/gamebattle.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita/dreamflyer.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/educoncepts.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/concepts/blog.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Projects/emacs-config/custom.el" 1 1 1 nil nil 9015 (overwrite-mode))))
(setq-default file-name-history '("~/.emacs.d/elpa/ruby-electric-1.1/ruby-electric-autoloads.el" "~/.emacs.d/elpa/ruby-compilation-0.7/ruby-compilation-autoloads.el" "~/.emacs.d/elpa/rspec-mode-0.2/rspec-mode-autoloads.el" "~/.emacs.d/elpa/inf-ruby-2.1/inf-ruby-autoloads.el" "~/.emacs.d/elpa/ruby-mode-1.1/ruby-mode-autoloads.el" "/home/m4nic/Lab/ruby/drp/test1.rb" "~/Sites/slutmachines.com/src/inno/sql/deftable.clj" "/home/m4nic/Sites/slutmachines.com/src/casino/model/tables.clj" "~/Sites/slutmachines.com/lib/clojure-contrib-1.2.0-20100608.210420-126.jar" "/home/m4nic/Sites/slutmachines.com/lib/hiccup-0.2.4.jar" "/home/m4nic/Sites/slutmachines.com/test/casino/model/account_test.clj" "/home/m4nic/Sites/slutmachines.com/default-config.clj" "/home/m4nic/Sites/slutmachines.com/src/casino/model/config.clj" "/home/m4nic/Sites/slutmachines.com/src/casino/model.clj" "~/Sites/slutmachines.com/default-config.clj" "/home/m4nic/Sites/slutmachines.com/src/casino/model/player.clj" "/home/m4nic/Sites/slutmachines.com/src/clocks/jquery.clj" "/home/m4nic/Lab/clojure/clocks/_ref/hiccup/src/hiccup/core.clj" "/home/m4nic/Lab/clojure/clocks/src/clocks/data.clj" "~/Sites/slutmachines.com/lib/clocks-0.7.jar" "/home/m4nic/Sites/boymaas.nl/posts/2010-02-09-a-haskel-blog.markdown" "~/Sites/boymaas.nl/posts/2010-06-15-clocks-portmortem.markdown" "~/Sites/slutmachines.com/lib/clocks-0.6.jar" "~/Sites/slutmachines.com/lib/scriptjure-0.1.8.jar" "/home/m4nic/Sites/slutmachines.com/src/forms.clj" "/home/m4nic/Sites/slutmachines.com/public/style.css" "/home/m4nic/Sites/slutmachines.com/jquery-lib/jquery-validate/localization/messages_nl.js" "/home/m4nic/Sites/slutmachines.com/jquery-lib/jquery-validate/jquery.validate.js" "/home/m4nic/Sites/slutmachines.com/public/jquery.validate.min.js" "/home/m4nic/Lab/clojure/clocks/README.markdown" "~/Lab/clojure/clocks/clocks.jar" "/home/m4nic/Lab/clojure/clocks/src/examples/login.clj"))
(setq-default anything-c-adaptive-history '(("Lacarte" (isearch-forward ("search" . 1))) (command ("ruby-end-of-block" ("ruby" . 1)) ("rename-file" ("rename-file" . 1)) ("rename-buffer" ("rename" . 1)) ("insert-kbd-macro" ("kbd-macro" . 1)) ("kbd-macro-query" ("kbd-m" . 1)) ("call-last-kbd-macro" ("macro" . 1)) ("slime-pprint-eval-last-expression" ("pprint" . 1))) (function ("dired-rename-file" ("rename" . 1)) ("cl-prettyexpand" ("pretty" . 1))) (file ("/projects/pylons/shop/shop/controllers/counter.py" ("counter" . 2))) (buffer ("counter.py" ("" . 1)) ("python-mode.el" ("python" . 1)))))
(setq-default anything-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default anything-c-source-extended-command-history '((name . "Emacs Commands History") (candidates . extended-command-history) (type . command)))
(setq-default anything-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (match anything-c-match-on-file-name anything-c-match-on-directory-name) (type . file)))
(setq-default anything-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . anything-c-source-global-mark-ring-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (second items)) (goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (second items)) (goto-line (string-to-number (car items))) (anything-match-line-color-current-line)))))
(setq-default anything-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (anything-attrset (quote last-command) last-command)) (candidates lambda nil (loop for kill in kill-ring unless (or (< (length kill) anything-kill-ring-threshold) (string-match "^[\\s\\t]+$" kill)) collect kill)) (action . anything-c-kill-ring-action) (last-command) (migemo) (multiline)))
(setq-default anything-c-source-mark-ring '((name . "mark-ring") (init lambda nil (setq anything-mark-ring-cache (anything-c-source-mark-ring-candidates))) (candidates lambda nil (anything-aif anything-mark-ring-cache it)) (action ("Goto line" lambda (candidate) (goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (goto-line (string-to-number candidate)) (anything-match-line-color-current-line))))
(setq-default anything-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (symbol-value minibuffer-history-variable))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (action . insert)))
(setq-default buffer-name-history '("core.clj • clocks" "pages.clj • src" "jquery.clj" "data.clj" "*sldb clojure/15*" "*sldb clojure/16*" "pages.clj"))
(setq-default command-history '((inf-ruby-complete-or-tab "") (vimpulse-delete 266 266) (vimpulse-delete 266 267) (vimpulse-delete 34 37) (find-file "/home/m4nic/Lab/ruby/drp/test1.rb") (git-status "/home/m4nic/Lab/clojure/clocks/src/clocks/") (switch-to-buffer "core.clj • clocks") (git-status "/home/m4nic/Sites/slutmachines.com/src/") (switch-to-buffer "pages.clj • src") (vimpulse-yank 5875 5933) (vimpulse-change 4925 4929) (vimpulse-change 4428 4432) (vimpulse-change 4239 4243) (vimpulse-change 3218 3221) (vimpulse-change 1018 1023) (vimpulse-change 935 938) (switch-to-buffer "jquery.clj") (vimpulse-change 880 886) (vimpulse-delete 841 848)))
(setq-default extended-command-history '("ruby-end-of-block" "rename-file" "rename-buffer" "insert-kbd-macro" "kbd-macro-query" "call-last-kbd-macro" "isearch-forward" "slime-pprint-eval-last-expression"))
(setq-default find-tag-history '("buffer-file-name" "locate-dominating-file" "slime-macroexpand-1" #("hiccup" 0 6 (fontified t)) #("sequence" 0 8 (face font-lock-builtin-face fontified t action nil candidate-face ac-dabbrev-menu-face selection-face ac-dabbrev-selection-face)) "uiCall" #("render" 0 6 (fontified t))))
(setq-default global-mark-ring 'nil)
(setq-default grep-files-history '("ch" "el"))
(setq-default grep-history '("grep -nH -r . -e trace" "grep -nH -r . -e assert" "grep -nH -e -r . assert" "grep -nH -e -r assert ." "grep -nH -e -r assert" "grep -nH -e assert" "grep -nH -e assert.*keyword" "grep -nH -e " "grep -nH -e cl-format -r ." "grep -nH -e org-src-lang-modes -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ./ --exclude-dir .svn" "grep -nH -e org-cycle -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w\\+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ./ --exclude-dir .svn" "grep -nH -e warning -r ./ --exclude-dir .svn" "grep -nH -e 'org-.*-face' -r ../org-mode/lisp/" "grep -nH -e tipbox -r . --exclude-dir .svn" "grep -nH -e tipbox -r . --exclude .svn" "grep -nH -e tipbox -r ."))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default ido-buffer-history '("c" "cor" "pa" "da" "core" "page" "mode" "s" "scr" "pag" "jq" "def" "ser" "j"))
(setq-default ido-file-history '("r" "ta" "mo" "hic" "te" "de" "con" "mod" "pl" "model/" "casino/" "sr" "cl" "hi" "_" "da" "pos" "bo" "forms.clj" "s" "p" "messnl" "lo" "jq" "pub" "re" "ex" "jquery.clj"))
(setq-default kmacro-ring '(("f(d%;;;;" 0 "%d") ("d%p" 0 "%d") ([100 37 59 59 return 71 111 return escape 112 59 59 return] 0 "%d") ([121 37 100 37 59 102 99 111 114 101 46 backspace 45 backspace backspace 111 backspace 101 45 104 101 108 112 101 114 115 46 99 108 106 return 112 59 59 return] 0 "%d") ([119 119 119 119 47 108 105 115 116 return] 0 "%d")))
(setq-default minibuffer-history '("inf-" "rub" "inf-r" "smex" "pa" "ruby" "fortune" "kill-" "4005" "127.0.0.1" "sl" "slim" "git" "slime-expan"))
(setq-default query-replace-history '("clocks-uri" "block-uri" "defn" "defn-" "vsf:block->vsf:fn-call" "vsf:block->vsf->fn-call" "body->vsf:fn-call" "body->vsf-callblock" "body->vsf" "body->vsf-block" "vsf-block->vsf-callblock" "walker" "inner" "`" "'" "(def" "(def" "" "specialforms->route-map" "vsf->msf" "b" "form" "special-form" "block-route" "expand-js-macros" "render-js-forms" "block" "defblock"))
(setq-default read-expression-history '("ANY"))
(setq-default regexp-search-ring '("ruby" "type to" "help" "block" "unique" "wrap-jso" "font-size" "prepend" "callblock" "map\\?" "clpartial" "macroexpan" "stuff" "walk" "assert" "key"))
(setq-default slime-minibuffer-history '("(test-register)" "reg_email" "e" "(start-server)" "pages/clpartial-main" "main" "pages/main" "(is-block? '(page \"root\" [] ))" "(symbol-and-eq? '(nil) 'block)" "(symbol-and-eq? '() 'block)" "(symbol-and-eq? nil 'block)" "(symbol-and-eq? nil)" "swank.clj-contrib.pprint" "swank.commands" "clocks.core/*defblock-registry*" "page-routes" "(ns-unmap *ns* 'md5=)" "(ns-unmap *ns* 'prepend-uri-prefix)"))
(setq-default smex-history '(clipboard-yank update-directory-autoloads clojure-test-mode smex-initialize git-status slime-connect query-replace-regexp))
(setq-default viper-ex-history '("w" "!pwd" "150,152w" "q" "map \";[\" \";xclipboard-kill-rignng-save\"" "map \";q\" [f \\( (control k) \\; \\; \\ G o \\ escape p \\; \\; \\]" ":w" "map \";sr\"" "reg" "61,64s/^/;/" "map \";t\" [m r \\` t (control x) (control e) \\` r]" "map \";t\"" "map \";t\" [\\` a (control x) (control e)]" "w:w" "se" "g/defn/p" "g/defn/" "%s/defn/blah/g" "%s/defn/blah/gc"))
(setq-default viper-quote-region-history '("> "))
(setq-default viper-search-history '("prepare" "list" "blah" ""))
(set-register 97 "  (let [route-map (vsf->route-map prefix vsf)]
")
(set-register 111 "(defpage index \"/index\"
  (html [:html
         [:head
          [:title \"Welcome\"]]
         [:body
          [:h1 \"login\"]
          (defblock login-form []
            [:form {:method :post}
             (defblock email [email]
               [:input {:type :text
                        :value email
                        :onchange (str \"$(this).post(\" (block-url :email-msg) r* \", {email: this.value})\")}])
             (defblock email-msg [email]
               (if-let [msg (validate-email email)]
                 [:div.errormsg msg]))])]]))")
