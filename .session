;;; Automatically generated on Tue Jun  1 02:33:15 2010
;;; Invoked by m4nic@Idefix-Ubuntu using 23.0.91.1
(setq-default kill-ring '(#("-not" 0 4 (face font-lock-function-name-face fontified t)) #("(run-example)
" 0 1 (fontified t) 1 8 (fontified t) 8 13 (fontified t action nil candidate-face ac-dabbrev-menu-face selection-face ac-dabbrev-selection-face) 13 14 (fontified t)) #("t" 0 1 (fontified t)) "c" #("-src" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (face font-lock-string-face fontified t) 3 4 (fontified t face font-lock-string-face)) #("clojure" 0 7 (face font-lock-string-face fontified t)) #("Projects" 0 8 (face font-lock-string-face fontified t)) "
" "
/Sites" "# ignore the unique appliction configs
/.gconf/apps/*
" "!"))
(setq-default session-file-alist '(("~/Lab/clojure/Gajure/src/gajure/core.clj" 4045 4098 1 nil nil 1056 (overwrite-mode)) ("~/Projects/emacs-config/elpa/clojure-mode-1.7.1/clojure-mode-autoloads.el" 1040 nil 1 nil nil 1040 (overwrite-mode)) ("~/Projects/emacs-config/elpa/slime-20100404/slime-autoloads.el" 2563 nil 1 nil nil 2563 (overwrite-mode)) ("~/Projects/emacs-config/elpa/slime-repl-20100404/slime-repl-autoloads.el" 424 nil 1 nil nil 424 (overwrite-mode)) ("~/Projects/emacs-config/elpa/swank-clojure-1.1.0/swank-clojure-autoloads.el" 1078 nil 1 nil nil 1078 (overwrite-mode)) ("~/Lab/clojure/Gajure/src/Example/example.clj" 778 47 1 nil nil 779 (overwrite-mode)) ("~/Projects/emacs-config/init.el" 645 31905 1 nil nil 647 (overwrite-mode)) ("~/Sites/slutmachines.com/src/server.clj" 961 nil 1 nil nil 1124 (overwrite-mode)) ("~/Projects/emacs-config/init-clojure.el" 116 nil 1 nil nil 118 (overwrite-mode)) ("~/.gitignore" 493 771 1 nil nil 644 (overwrite-mode)) ("~/Planning/innovita/casino.gtd" 30148 29399 1 nil nil nil (overwrite-mode)) ("~/Planning/concepts/ocasso.gtd" 2599 448 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita/het-schouwtje.gtd" 405 302 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/maybe.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita/gamebattle.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/innovita/dreamflyer.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/educoncepts.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Planning/concepts/blog.gtd" 1 nil 1 nil nil nil (overwrite-mode)) ("~/Projects/emacs-config/custom.el" 1 1 1 nil nil 9015 (overwrite-mode))))
(setq-default file-name-history '("~/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar" "~/Sites/slutmachines.com/lib/swank-clojure-1.2.0.jar" "~/Sites/slutmachines.com/src/server.clj" "~/.emacs.d/org-clock-save.el" "/home/m4nic/Lab/clojure/Gajure/src/gajure/core.clj" "~/.emacs.d/elpa/swank-clojure-1.1.0/swank-clojure-autoloads.el" "~/.emacs.d/elpa/slime-repl-20100404/slime-repl-autoloads.el" "~/.emacs.d/elpa/slime-20100404/slime-autoloads.el" "~/.emacs.d/elpa/clojure-mode-1.7.1/clojure-mode-autoloads.el" "~/.emacs.d/elpa/smart-tab-0.3/smart-tab-autoloads.el" "~/.emacs.d/site-lisp/org-mode/lisp/org-attach.el" "~/.emacs.d/site-lisp/vimpulse/vimpulse.el" "/usr/share/emacs/23.0.91/lisp/emulation/viper.elc" "~/.emacs.d/init-ido.el" "~/.emacs.d/custom.el" "~/.emacs.d/site-lisp/viper-addons/viper-in-more-modes.el" "~/.emacs.d/elpa/builtin-packages" "~/.emacs.d/.viper" "~/.emacs.d/site-lisp/org-babel/lisp/org-babel.el" "~/.emacs.d/site-lisp/org-mode/contrib/lisp/org-babel-init.el" "~/.emacs.d/site-lisp/org-babel/lisp/langs/org-babel-sh.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-haskell.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-emacs-lisp.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-R.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-asymptote.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-css.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-sql.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-sh.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/org-babel-tangle.el" "~/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/block" "~/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/src" "~/.emacs.d/elpa/smart-tab-0.3/smart-tab.el" "~/.emacs.d/init-org.el" "~/.clojure.conf"))
(setq-default anything-c-adaptive-history '((file ("/projects/pylons/shop/shop/controllers/counter.py" ("counter" . 2))) (buffer ("counter.py" ("" . 1)) ("python-mode.el" ("python" . 1)))))
(setq-default anything-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default anything-c-source-extended-command-history '((name . "Emacs Commands History") (candidates . extended-command-history) (type . command)))
(setq-default anything-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (match anything-c-match-on-file-name anything-c-match-on-directory-name) (type . file)))
(setq-default anything-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . anything-c-source-global-mark-ring-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (second items)) (goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (second items)) (goto-line (string-to-number (car items))) (anything-match-line-color-current-line)))))
(setq-default anything-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (anything-attrset (quote last-command) last-command)) (candidates lambda nil (loop for kill in kill-ring unless (or (< (length kill) anything-kill-ring-threshold) (string-match "^[\\s\\t]+$" kill)) collect kill)) (action . anything-c-kill-ring-action) (last-command) (migemo) (multiline)))
(setq-default anything-c-source-mark-ring '((name . "mark-ring") (init lambda nil (setq anything-mark-ring-cache (anything-c-source-mark-ring-candidates))) (candidates lambda nil (anything-aif anything-mark-ring-cache it)) (action ("Goto line" lambda (candidate) (goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (goto-line (string-to-number candidate)) (anything-match-line-color-current-line))))
(setq-default anything-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (symbol-value minibuffer-history-variable))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (action . insert)))
(setq-default buffer-name-history '("*Packages*" "server.clj" "*SLIME Macroexpansion*" "*Ibuffer*" "*slime-repl clojure*" "example.clj" "init.el" "*scratch*" "*Backtrace*" "init-clojure.el" "*git-status*" "*git-commit*" "init-haxe.el"))
(setq-default command-history '((kill-buffer "*Packages*") (switch-to-buffer "server.clj") (pp-macroexpand-expression (quote ANY)) (switch-to-buffer "*SLIME Macroexpansion*") (slime-connect "127.0.0.1" 4005) (kill-buffer "*Ibuffer*") (kill-buffer "*slime-repl clojure*") (ibuffer-find-file "/home/m4nic/Sites/slutmachines.com/src/server.clj" t) (slime-who-calls "rand-from-list") (slime-inspect "total-el") (find-file "/home/m4nic/Lab/clojure/Gajure/src/gajure/core.clj") (switch-to-buffer "example.clj") (switch-to-buffer "*slime-repl clojure*") (find-file "/home/m4nic/Lab/clojure/Gajure/src/Example/example.clj") (switch-to-buffer "init.el") (find-file "/home/m4nic/.emacs.d/init.el") (switch-to-buffer "*scratch*") (switch-to-buffer "*Backtrace*") (kill-buffer "*Backtrace*") (clojure-project "/home/m4nic/Sites/slutmachines.com/") (find-file "/home/m4nic/Sites/slutmachines.com/src/server.clj") (switch-to-buffer "init-clojure.el") (find-file "/home/m4nic/.emacs.d/init-clojure.el") (find-file "/home/m4nic/.gitignore") (git-status "/home/m4nic/") (switch-to-buffer "*git-status*") (kill-buffer "*git-commit*") (find-file "/home/m4nic/DEPENDENCIES") (switch-to-buffer "init-haxe.el")))
(setq-default global-mark-ring 'nil)
(setq-default grep-files-history '("ch" "el"))
(setq-default grep-history '("grep -nH -e cl-format -r ." "grep -nH -e org-src-lang-modes -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ./ --exclude-dir .svn" "grep -nH -e org-cycle -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w\\+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ./ --exclude-dir .svn" "grep -nH -e warning -r ./ --exclude-dir .svn" "grep -nH -e 'org-.*-face' -r ../org-mode/lisp/" "grep -nH -e tipbox -r . --exclude-dir .svn" "grep -nH -e tipbox -r . --exclude .svn" "grep -nH -e tipbox -r ."))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default ido-buffer-history '("se" "e" "ser" "sc"))
(setq-default ido-file-history '("se" "Si" "ga" "E" "sr" "cl" "La" "init.el" "init.e" ".em.d" ".emacs.d/i" ".em" ".emacs.d" "sl" "init-clo" ".giti" ".gi" ".git" "DE"))
(setq-default kmacro-ring '(([119 119 119 119 47 108 105 115 116 return] 0 "%d")))
(setq-default minibuffer-history '("pa" "mac" "help" "4005" "127.0.0.1" "slm" "pp-ma" "macroe" "slim" "sl" "cloj" "sli"))
(setq-default query-replace-history '("with-test-db" "model/with-test-db" "\\1:@\\2" "\\(\\*\\+.*\\):\\([a-z]\\)" ":@\\1" "\\*.*:\\([a-z]\\)" ":\\([a-z]\\)" ":\\([a-z])" ":([a-z])" ":[a-z]" ";" "." "^"))
(setq-default read-expression-history '("ANY"))
(setq-default regexp-search-ring '("exmp" "slim" "slime" "swankq" "swank" "clojd" "swaknk" "swankd" "C-c" "clojure-"))
(setq-default slime-minibuffer-history '("rand-from-list" "total-el"))
(setq-default smex-history '(slime-connect package-list-packages help git-status indent-region py-shell revert-buffer))
(setq-default viper-ex-history '("q" "w"))
(setq-default viper-quote-region-history '("> "))
(setq-default viper-search-history '("prepare" "list" "blah" ""))
(set-register 97 ";;(viper-record-kbd-macro \";c\" 'vi-state [(control c) (control k)] 'clojure-mode)
")
