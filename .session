;;; Automatically generated on Tue Oct 20 16:08:06 2009
;;; Invoked by m4nic@Idefix-Ubuntu using 23.0.91.1
(setq-default kill-ring '(""))
(setq-default session-file-alist '(("~/Projects/emacs-config/custom.el" 1 1 1 nil nil 9015 (overwrite-mode))))
(setq-default file-name-history '("~/Planning/gtd.gtd_archive" "~/Projects/python/market/market.gtd_archive" "~/Planning/innovita.gtd_archive" "~/.emacs.d/elpa/smart-tab-0.3/smart-tab-autoloads.el" "~/Planning/concepts/blog.gtd" "~/Planning/educoncepts.gtd" "~/Planning/innovita/dreamflyer.gtd" "~/Planning/innovita/gamebattle.gtd" "~/.emacs.d/elpa/clojure-mode-1.4/clojure-mode-autoloads.el" "~/Planning/maybe.gtd" "~/Planning/innovita.gtd" "~/.emacs.d/site-lisp/org-mode/lisp/org-attach.el" "~/.emacs.d/site-lisp/vimpulse/vimpulse.el" "/usr/share/emacs/23.0.91/lisp/emulation/viper.elc" "~/Projects/clojure-src/slime/HACKING" "~/.emacs.d/init-ido.el" "~/Projects/clojure-src/slime/slime.el" "~/.emacs.d/custom.el" "~/.emacs.d/site-lisp/viper-addons/viper-in-more-modes.el" "~/Projects/python/market/market/model/objects/classes.py" "~/.emacs.d/elpa/builtin-packages" "~/.emacs.d/elpa/clojure-test-mode-1.2/clojure-test-mode-autoloads.el" "~/.emacs.d/elpa/clojure-test-mode-1.2/clojure-test-mode-pkg.el" "~/.emacs.d/elpa/clojure-test-mode-1.2/clojure-test-mode.el" "~/Planning/data/2c/7e159b-05db-40a4-834f-176a75088075/weekly-review.gtd" "~/Planning/concepts/playlist-convertor.gtd" "~/.emacs.d/.viper" "~/.emacs.d/site-lisp/org-babel/lisp/org-babel.el" "~/.emacs.d/site-lisp/org-mode/contrib/lisp/org-babel-init.el" "~/.emacs.d/site-lisp/org-babel/lisp/langs/org-babel-sh.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-haskell.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-emacs-lisp.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-R.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-asymptote.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-css.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-sql.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-sh.el" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/sql/test.clj" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/org-babel-tangle.el" "~/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/block" "~/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/src" "~/.emacs.d/elpa/smart-tab-0.3/smart-tab.el" "~/.emacs.d/init-org.el" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/jar.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/probabilities/monte_carlo.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/macros.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/macro_utils.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/str_utils.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/sql.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/dataflow.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/datalog.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/datalog/example.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/def.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/pprint/cl-format.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/test_contrib/pprint/cl_format.clj" "~/.clojure.conf" "~/bin/start-nailgun-server" "~/Projects/clojure-src/clojure-extra/sh-script/clojure" "~/.quotes" "~/bin/cljc" "~/Projects/haskell/Experiment.hs" "~/Planning/innovita/het-schouwtje.gtd" "~/Projects/clojure-examples/ants.clj" "~/Planning/journal.gtd" "~/Projects/clojure/server/casino/src/casino/model.clj" "~/Projects/clojure/server/casino/src/casino/model/paymentsystem.clj" "~/Projects/clojure/server/casino/test/casino/model/test/game.clj" "~/Projects/clojure/server/casino/src/casino/model/game.clj" "~/.emacs.d/init-clojure.el" "~/Projects/python/market/MANIFEST.in" "~/Projects/clojure/server/casino/src/server.clj" "~/Projects/python/market/market/lib/snapshot/config/defaults.pyc" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/seq_utils.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/accumulators.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/core.clj" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/lazy_seqs.clj" "~/Planning/gtd.gtd" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/str_utils2.clj" "~/Projects/python/market/market.gtd" "~/Projects/python/market/test.ini" "~/Projects/python/market/market/tests/functional/test_homepage.py" "~/Projects/clojure-src/clojure-contrib/src/clojure/contrib/trace.clj" "~/Projects/clojure/server/casino/src/casino/emacs-config.el" "~/Planning/concepts/ocasso.gtd" "~/Planning/innovita/casino.gtd" "~/Projects/clojure/server/casino/src/casino/game/base.clj" "~/Projects/clojure/server/casino/public/games/flas/clubk/comm.as" "~/Projects/haxe/Test.hx" "~/Projects/haxe/compile.hxml" "~/.emacs.d/init-haxe.el" "~/.emacs.d/init.el" "~/.emacs.d/org-clock-save.el" "/home/m4nic/.emacs.d/init.el" "/home/m4nic/.emacs.d/init-haxe.el" "/home/m4nic/Projects/haxe/compile.hxml" "/home/m4nic/Projects/haxe/Test.hx" "/home/m4nic/Desktop/Psych/streams.txt" "/home/m4nic/Projects/python/market/test.ini"))
(setq-default anything-c-adaptive-history '((file ("/projects/pylons/shop/shop/controllers/counter.py" ("counter" . 2))) (buffer ("counter.py" ("" . 1)) ("python-mode.el" ("python" . 1)))))
(setq-default anything-c-source-complex-command-history '((name . "Complex Command History") (candidates lambda nil (mapcar (quote prin1-to-string) command-history)) (type . sexp)))
(setq-default anything-c-source-extended-command-history '((name . "Emacs Commands History") (candidates . extended-command-history) (type . command)))
(setq-default anything-c-source-file-name-history '((name . "File Name History") (candidates . file-name-history) (match anything-c-match-on-file-name anything-c-match-on-directory-name) (type . file)))
(setq-default anything-c-source-global-mark-ring '((name . "global-mark-ring") (candidates . anything-c-source-global-mark-ring-candidates) (action ("Goto line" lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (second items)) (goto-line (string-to-number (car items)))))) (persistent-action lambda (candidate) (let ((items (split-string candidate ":"))) (switch-to-buffer (second items)) (goto-line (string-to-number (car items))) (anything-match-line-color-current-line)))))
(setq-default anything-c-source-kill-ring '((name . "Kill Ring") (init lambda nil (anything-attrset (quote last-command) last-command)) (candidates lambda nil (loop for kill in kill-ring unless (or (< (length kill) anything-kill-ring-threshold) (string-match "^[\\s\\t]+$" kill)) collect kill)) (action . anything-c-kill-ring-action) (last-command) (migemo) (multiline)))
(setq-default anything-c-source-mark-ring '((name . "mark-ring") (init lambda nil (setq anything-mark-ring-cache (anything-c-source-mark-ring-candidates))) (candidates lambda nil (anything-aif anything-mark-ring-cache it)) (action ("Goto line" lambda (candidate) (goto-line (string-to-number candidate)))) (persistent-action lambda (candidate) (goto-line (string-to-number candidate)) (anything-match-line-color-current-line))))
(setq-default anything-c-source-minibuffer-history '((name . "Minibuffer History") (header-name lambda (name) (format "%s (%s)" name minibuffer-history-variable)) (candidates lambda nil (let ((history (symbol-value minibuffer-history-variable))) (if (consp (car history)) (mapcar (quote prin1-to-string) history) history))) (migemo) (action . insert)))
(setq-default global-mark-ring 'nil)
(setq-default grep-files-history '("ch" "el"))
(setq-default grep-history '("grep -nH -e cl-format -r ." "grep -nH -e org-src-lang-modes -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ./ --exclude-dir .svn" "grep -nH -e org-cycle -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w\\+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ./ --exclude-dir .svn" "grep -nH -e warning -r ./ --exclude-dir .svn" "grep -nH -e 'org-.*-face' -r ../org-mode/lisp/" "grep -nH -e tipbox -r . --exclude-dir .svn" "grep -nH -e tipbox -r . --exclude .svn" "grep -nH -e tipbox -r ."))
(setq-default minibuffer-history '("inden" "packa" "gi" "casino.game.base" "git" "clojch" "cloj-pro" "svn-stat" "svn" "rever" "clojg" "make-d" "cu" "cl" "svn-status" "grep" "cl-format" "render-blog" "onlisp.pd" "custom" "org-file.query" "mkd" "global-smart-tab-mode" "custom-op" "git-status" "slime-repl-previous-input" "slime-repl-previous-prompt"))
(setq-default query-replace-history '("with-test-db" "model/with-test-db" "\\1:@\\2" "\\(\\*\\+.*\\):\\([a-z]\\)" ":@\\1" "\\*.*:\\([a-z]\\)" ":\\([a-z]\\)" ":\\([a-z])" ":([a-z])" ":[a-z]" ";" "." "^"))
(setq-default regexp-search-ring '("pms-grep-collrrrrrrr" "spin" "pms-collaps" "casino" "trim" "lt" "join" "lines" "str_util" "tags" "parse-prop" "(parse-" "smart" "auto-com" "yasni" "clojure-mode"))
(setq-default smex-history '(indent-region package-list-packages git-status clojure-guide clojure-project clojure-cheat svn-status))
(setq-default viper-quote-region-history '("> "))
(setq-default viper-search-history '(""))
(set-register 97 ";;(viper-record-kbd-macro \";c\" 'vi-state [(control c) (control k)] 'clojure-mode)
")
