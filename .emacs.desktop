;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Tue Jun  1 02:33:15 2010
;; Desktop file format version 206
;; Emacs version 23.0.91.1

;; Global section:
(setq extended-command-history nil)
(setq file-name-history '("~/.emacs.d/org-clock-save.el" "~/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar" "~/Sites/slutmachines.com/lib/swank-clojure-1.2.0.jar" "~/Sites/slutmachines.com/src/server.clj" "~/.emacs.d/org-clock-save.el" "~/Sites/slutmachines.com/src/server.clj" "/home/m4nic/Lab/clojure/Gajure/src/gajure/core.clj" "~/.emacs.d/elpa/swank-clojure-1.1.0/swank-clojure-autoloads.el" "~/.emacs.d/elpa/slime-repl-20100404/slime-repl-autoloads.el" "~/.emacs.d/elpa/slime-20100404/slime-autoloads.el" "~/.emacs.d/elpa/clojure-mode-1.7.1/clojure-mode-autoloads.el" "~/.emacs.d/elpa/smart-tab-0.3/smart-tab-autoloads.el" "~/.emacs.d/site-lisp/org-mode/lisp/org-attach.el" "~/.emacs.d/site-lisp/vimpulse/vimpulse.el" "/usr/share/emacs/23.0.91/lisp/emulation/viper.elc" "~/.emacs.d/init-ido.el" "~/.emacs.d/custom.el" "~/.emacs.d/site-lisp/viper-addons/viper-in-more-modes.el" "~/.emacs.d/elpa/builtin-packages" "~/.emacs.d/.viper" "~/.emacs.d/site-lisp/org-babel/lisp/org-babel.el" "~/.emacs.d/site-lisp/org-mode/contrib/lisp/org-babel-init.el" "~/.emacs.d/site-lisp/org-babel/lisp/langs/org-babel-sh.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-haskell.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-emacs-lisp.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-R.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-asymptote.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-css.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-sql.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/langs/org-babel-sh.el" "~/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/org-babel-tangle.el" "~/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/block" "~/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/src" "~/.emacs.d/elpa/smart-tab-0.3/smart-tab.el" "~/.emacs.d/init-org.el" "~/.clojure.conf"))
(setq ido-last-directory-list '(("/home/m4nic/" . "Sites/") ("/home/m4nic/Lab/clojure/Gajure/src/" . "gajure/") ("/home/m4nic/Lab/clojure/Gajure/" . "src/") ("/home/m4nic/Lab/clojure/" . "Gajure/") ("/home/m4nic/Lab/" . "clojure/") ("/home/m4nic/Sites/slutmachines.com/" . "src/") ("/home/m4nic/Sites/" . "slutmachines.com/") ("/home/m4nic/Projects/clojure/server/casino/public/games/flas/" . "clubk/") ("/home/m4nic/Projects/clojure/server/casino/public/games/" . "flas/") ("/home/m4nic/Projects/clojure/server/casino/public/" . "games/") ("/home/m4nic/Projects/clojure-examples/compojure.org/public/" . "img/") ("/home/m4nic/Projects/clojure-examples/compojure.org/src/org/" . "compojure/") ("/home/m4nic/Projects/clojure-examples/compojure.org/src/" . "org/") ("/home/m4nic/Projects/clojure-examples/compojure.org/" . "pages/") ("/home/m4nic/Projects/clojure-examples/" . "compojure.org/") ("/home/m4nic/Projects/python/market/market/systemtest/config/" . "markets/") ("/home/m4nic/Projects/python/market/market/tests/" . "fixtures/") ("/home/m4nic/Projects/python/market/market/systemtest/" . "cases/") ("~/Projects/python/" . "market/") ("~/Projects/" . "python/") ("/home/m4nic/Projects/clojure/server/casino/src/casino/" . "model/") ("/home/m4nic/Projects/clojure/server/casino/src/" . "casino/") ("/home/m4nic/Projects/clojure/server/casino/" . "public/") ("/home/m4nic/Projects/clojure/server/" . "casino/") ("/home/m4nic/Personal/personal/writings/programming/" . "python/") ("/home/m4nic/Personal/personal/writings/philosophy/" . "_attic/") ("/home/m4nic/Personal/personal/writings/" . "philosophy/") ("/home/m4nic/Personal/personal/" . "writings/") ("/home/m4nic/Projects/clojure-src/clojure-contrib/src/clojure/contrib/test_contrib/" . "pprint/") ("/home/m4nic/Projects/clojure/blog/src/" . "org_file/") ("/home/m4nic/Projects/clojure/blog/" . "test-org-files/") ("/home/m4nic/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/" . "org-mode/") ("/home/m4nic/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/" . "text-mode/") ("/home/m4nic/.emacs.d/site-lisp/yasnippet-0.6.0c/" . "snippets/") ("/home/m4nic/Personal/" . "personal/") ("/home/m4nic/.emacs.d/elpa/" . "smart-tab-0.3/") ("/usr/share/emacs/23.0.91/lisp/" . "emulation/") ("/usr/share/emacs/site-lisp/" . "emacs-goodies-el/") ("/usr/share/emacs/23.0.91/" . "leim/") ("/usr/share/emacs/" . "23.0.91/") ("/home/m4nic/Projects/clojure/casino/src/casino/" . "core/") ("/home/m4nic/Projects/clojure/casino/src/inno/" . "sql/") ("/home/m4nic/Projects/clojure-src/clojure/src/clj/" . "clojure/") ("/home/m4nic/Projects/clojure-src/clojure/src/" . "clj/") ("/home/m4nic/Projects/clojure/casino/src/" . "casino/") ("/home/m4nic/Projects/clojure-src/clojure-contrib/src/clojure/contrib/" . "test_contrib/") ("/home/m4nic/Projects/clojure-src/clojure-contrib/src/clojure/" . "contrib/") ("/home/m4nic/Projects/clojure-src/clojure-contrib/src/" . "clojure/") ("/home/m4nic/Projects/clojure-src/clojure-contrib/" . "src/") ("/home/m4nic/Projects/python/market/market/config/snapshot/" . "snaps/") ("/home/m4nic/Projects/python/market/market/config/" . "markets/") ("/home/m4nic/Projects/clojure-code/compojure/test/compojure/" . "http/") ("/home/m4nic/Projects/clojure-code/compojure/test/" . "compojure/") ("/home/m4nic/Projects/clojure-code/compojure/" . "test/") ("/home/m4nic/Projects/clojure-src/swank-clojure/swank/" . "commands/") ("/home/m4nic/Projects/clojure-src/swank-clojure/" . "swank/") ("/home/m4nic/Projects/clojure/casino/" . "src/") ("/home/m4nic/Projects/clojure/" . "server/") ("/home/m4nic/Projects/clojure-src/clojure/classes/" . "clojure/") ("/home/m4nic/Projects/clojure-src/clojure/" . "src/") ("/home/m4nic/Projects/clojure-src/" . "slime/") ("/home/m4nic/Projects/clojure-code/programming-clojure/examples/" . "server/") ("/home/m4nic/Projects/clojure-code/programming-clojure/" . "lancet/") ("/home/m4nic/Projects/clojure-code/" . "compojure/") ("/projects/pylons/shop/" . "shop/") ("/projects/pylons/shop/shop/templates/admin/" . "coupons/") ("/projects/pylons/shop/shop/templates/" . "admin/") ("/projects/pylons/shop/shop/controllers/" . "admin/") ("/projects/pylons/" . "shop/") ("/home/m4nic/Projects/python/market/market/lib/snapshot/" . "config/") ("/home/m4nic/Planning/attachments/" . "art-of-assembly-programming/") ("/home/m4nic/Desktop/" . "Psych/") ("/home/m4nic/Projects/python/market/market/public/jquery-boy/css/" . "le-frog/") ("/home/m4nic/Projects/python/market/market/public/jquery-boy/" . "css/") ("/home/m4nic/Projects/python/market/market/public/" . "jquery-boy/") ("/home/m4nic/Projects/python/market/market/model/" . "objects/") ("/home/m4nic/Projects/python/market/market/lib/" . "snapshot/") ("~/Projects/python/market/market/" . "config/") ("/home/m4nic/.emacs.d/site-lisp/org-mode/contrib/" . "lisp/") ("/projects/" . "pylons/") ("/projects/pylons/shop/shop/" . "model/") ("/etc/" . "X11/") ("/home/m4nic/.emacs.d/site-lisp/pymacs/python-site-dir/" . "ropemode/") ("/home/m4nic/.emacs.d/site-lisp/pymacs/" . "python-site-dir/") ("/home/m4nic/Projects/python/market/" . "market/") ("/home/m4nic/Projects/emacs-examples/conf-0-first-attempt/" . "auto-save-list/") ("/home/m4nic/.emacs.d/site-lisp/org-mode/" . "contrib/") ("/home/m4nic/Projects/haskell/bolt/" . "bolt-cabal/") ("/home/m4nic/Planning/data/" . "6d/") ("/home/m4nic/.emacs.d/site-lisp/" . "yasnippet-0.6.0c/") ("/home/m4nic/Projects/emacs-examples/" . "conf-0-first-attempt/") ("/home/m4nic/Planning/" . "innovita/") ("/usr/share/emacs22/" . "site-lisp/") ("/usr/share/" . "emacs/") ("/home/m4nic/Projects/emacs/" . "Pymacs-0.23/") ("/home/m4nic/Projects/python/market/market/templates/" . "community/") ("/home/m4nic/Projects/python/market/market/" . "tests/") ("/home/m4nic/Projects/python/" . "market/") ("/home/m4nic/Projects/haskell/bolt/mks/" . "app/") ("/home/m4nic/Projects/lisp/clbuild/source/" . "casino/")))
(setq ido-work-directory-list '("/home/m4nic/Lab/clojure/Gajure/src/gajure/" "/home/m4nic/Lab/clojure/Gajure/src/Example/" "/home/m4nic/.emacs.d/" "/home/m4nic/Sites/slutmachines.com/src/" "/home/m4nic/" "/home/m4nic/Projects/haxe/" "/home/m4nic/Projects/clojure/server/casino/public/games/flas/clubk/" "/home/m4nic/Projects/clojure/server/casino/src/casino/game/" "/home/m4nic/Desktop/Psych/" "/home/m4nic/Projects/python/market/" "/home/m4nic/Projects/clojure-src/clojure-contrib/src/clojure/contrib/" "/home/m4nic/Projects/clojure-examples/compojure.org/pages/" "/home/m4nic/Projects/clojure-examples/compojure.org/scripts/" "/home/m4nic/Projects/clojure-examples/compojure.org/public/img/" "/home/m4nic/Projects/clojure-examples/compojure.org/public/css/" "/home/m4nic/Projects/clojure-examples/compojure.org/src/org/compojure/" "/home/m4nic/Projects/python/market/market/tests/" "/home/m4nic/Projects/python/market/market/" "/home/m4nic/Projects/python/market/market/systemtest/cases/" "/home/m4nic/Projects/python/market/market/controllers/" "/home/m4nic/Projects/python/market/market/config/markets/" "/home/m4nic/Projects/python/market/market/systemtest/config/markets/" "/home/m4nic/Projects/python/market/market/systemtest/config/" "/home/m4nic/Projects/python/market/market/config/" "/home/m4nic/Projects/python/market/market/tests/fixtures/" "/home/m4nic/Projects/python/market/market/lib/" "/home/m4nic/Projects/python/market/market/tests/functional/" "/home/m4nic/Projects/python/market/market/tests/unit/" "/home/m4nic/Projects/python/market/market/systemtest/" "~/Projects/python/market/" "/home/m4nic/Projects/clojure/server/casino/src/casino/model/" "/home/m4nic/Projects/clojure/server/casino/src/casino/" "/home/m4nic/Planning/innovita/" "/home/m4nic/Projects/haskell/" "/home/m4nic/Personal/personal/writings/philosophy/" "/home/m4nic/Personal/personal/writings/mindhacking/" "/home/m4nic/Personal/personal/writings/programming/python/" "/home/m4nic/Personal/personal/writings/programming/" "/home/m4nic/Personal/personal/writings/philosophy/_attic/" "/home/m4nic/Personal/personal/writings/" "/home/m4nic/bin/" "/home/m4nic/Projects/clojure/blog/src/" "/home/m4nic/Projects/clojure-src/clojure-contrib/src/clojure/contrib/test_contrib/pprint/" "/home/m4nic/Projects/clojure/blog/src/org_file/" "/home/m4nic/Projects/clojure/blog/src/org-file/" "/home/m4nic/Projects/clojure-src/clojure-contrib/src/clojure/contrib/datalog/" "/home/m4nic/Projects/clojure/blog/test-org-files/" "/home/m4nic/.emacs.d/elpa/smart-tab-0.3/" "/home/m4nic/.emacs.d/site-lisp/yasnippet-0.6.0c/snippets/text-mode/org-mode/" "/home/m4nic/.emacs.d/site-lisp/org-mode/contrib/babel/lisp/"))
(setq ido-work-file-list '("core.clj" "example.clj" "init.el" "server.clj" ".gitignore" "DEPENDENCIES" "init-haxe.el" "compile.hxml" "Test.hx" "streams.txt"))
(setq grep-history '("grep -nH -e cl-format -r ." "grep -nH -e org-src-lang-modes -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ./ --exclude-dir .svn" "grep -nH -e org-cycle -r ." "grep -nH -e '\\w\\+\\.account\\.transfer' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w\\+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e '\\w+\\.account' -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ../model/ --exclude-dir .svn" "grep -nH -e Account -r ./ --exclude-dir .svn" "grep -nH -e warning -r ./ --exclude-dir .svn" "grep -nH -e 'org-.*-face' -r ../org-mode/lisp/" "grep -nH -e tipbox -r . --exclude-dir .svn" "grep -nH -e tipbox -r . --exclude .svn" "grep -nH -e tipbox -r ."))
(setq compile-history nil)
(setq minibuffer-history '("pa" "mac" "help" "4005" "127.0.0.1" "slm" "pa" "pp-ma" "macroe" "4005" "127.0.0.1" "slim" "4005" "127.0.0.1" "sl" "4005" "127.0.0.1" "slim" "cloj" "4005" "127.0.0.1" "sl" "pa" "4005" "127.0.0.1" "slim" "pa" "4005" "127.0.0.1" "sli"))
(setq query-replace-history '("with-test-db" "model/with-test-db" "\\1:@\\2" "\\(\\*\\+.*\\):\\([a-z]\\)" ":@\\1" "\\*.*:\\([a-z]\\)" ":@\\1" ":\\([a-z]\\)" ":@\\1" ":\\([a-z]\\)" ":@\\1" ":\\([a-z]\\)" ":@\\1" ":\\([a-z])" ":@\\1" ":([a-z])" ":@\\1" ":[a-z]" ";" "." ";" "^"))
(setq read-expression-history '("ANY"))
(setq regexp-history nil)
(setq regexp-search-ring '("exmp" "slim" "slime" "swankq" "swank" "slime" "clojd" "swaknk" "swankd" "swank" "swankd" "slime" "C-c" "slime" "clojure-" "slime"))
(setq search-ring nil)
(setq shell-command-history nil)
(setq tags-file-name "/home/m4nic/Projects/python/market/TAGS")
(setq register-alist (list '(26 file-query "/home/m4nic/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar:compojure/core.clj" 2142) '(25 file-query "/home/m4nic/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar:compojure/core.clj" 2142) '(97 . ";;(viper-record-kbd-macro \";c\" 'vi-state [(control c) (control k)] 'clojure-mode)\n") '(20 file-query "/home/m4nic/.emacs.d/init.el" 228) (desktop-list* 2 (let ((mk (make-marker))) (add-hook 'desktop-delay-hook (list 'lambda '() (list 'set-marker mk nil (get-buffer " *temp*")))) mk)) '(1 file-query "/home/m4nic/.emacs.d/init.el" 4871) (list 82 "Unprintable entity" (let ((mk (make-marker))) (add-hook 'desktop-delay-hook (list 'lambda '() (list 'set-marker mk nil (get-buffer " *temp*")))) mk))))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 206
  "/home/m4nic/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar:compojure/core.clj"
  "core.clj (compojure-0.4.0-RC3.jar)"
  'clojure-mode
  '(yas/minor-mode auto-complete-mode slime-mode)
  656
  '(448 nil)
  nil
  nil
  nil)

(desktop-create-buffer 206
  "/home/m4nic/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar:compojure/response.clj"
  "response.clj (compojure-0.4.0-RC3.jar)"
  'clojure-mode
  '(yas/minor-mode auto-complete-mode slime-mode)
  390
  '(nil nil)
  nil
  nil
  nil)

(desktop-create-buffer 206
  "/home/m4nic/Sites/slutmachines.com/src/server.clj"
  "server.clj"
  'clojure-mode
  '(yas/minor-mode auto-complete-mode slime-mode)
  646
  '(3656 nil)
  nil
  nil
  '((buffer-file-coding-system . undecided-unix) (overwrite-mode)))

(desktop-create-buffer 206
  "/home/m4nic/Sites/slutmachines.com/lib/swank-clojure-1.2.0.jar:swank/commands/basic.clj"
  "basic.clj (swank-clojure-1.2.0.jar)"
  'clojure-mode
  '(yas/minor-mode auto-complete-mode slime-mode)
  5752
  '(nil nil)
  nil
  nil
  nil)

(desktop-create-buffer 206
  "/home/m4nic/Sites/slutmachines.com/lib/swank-clojure-1.2.0.jar"
  "swank-clojure-1.2.0.jar"
  'archive-mode
  '(yas/minor-mode)
  790
  '(nil nil)
  t
  nil
  '((buffer-file-coding-system . no-conversion-multibyte)))

(desktop-create-buffer 206
  "/home/m4nic/Sites/slutmachines.com/lib/compojure-0.4.0-RC3.jar"
  "compojure-0.4.0-RC3.jar"
  'archive-mode
  '(yas/minor-mode)
  541
  '(nil nil)
  t
  nil
  '((buffer-file-coding-system . no-conversion-multibyte)))

